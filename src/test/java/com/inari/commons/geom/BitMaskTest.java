package com.inari.commons.geom;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class BitMaskTest {
    
    @Test
    public void testInit() {
        BitMask bitMask = new BitMask( 10, 10 );
        
        assertEquals( 
            "BitMask [region=[x=0,y=0,width=10,height=10], bits=\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000]", 
            bitMask.toString() 
        );
        
        bitMask = new BitMask( 10, 10, 10, 10 );
        
        assertEquals( 
            "BitMask [region=[x=10,y=10,width=10,height=10], bits=\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000]", 
            bitMask.toString() 
        );
    }
    
    @Test
    public void testSetBit() {
        BitMask bitMask = new BitMask( 5, 5, 10, 10 );
        
        assertEquals( 
            "BitMask [region=[x=5,y=5,width=10,height=10], bits=\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000]", 
            bitMask.toString() 
        );
        
        bitMask.set( 7, 7 );
        assertEquals( 
            "BitMask [region=[x=5,y=5,width=10,height=10], bits=\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000100\n" + 
            "0000000000\n" + 
            "0000000000]", 
            bitMask.toString() 
        );
        
        bitMask.set( 7, 7, true );
        assertEquals( 
            "BitMask [region=[x=5,y=5,width=10,height=10], bits=\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0010000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000100\n" + 
            "0000000000\n" + 
            "0000000000]", 
            bitMask.toString() 
        );
    }
    
    @Test
    public void testSetRegion() {
        BitMask bitMask = new BitMask( 5, 5, 10, 10 );
        
        assertEquals( 
            "BitMask [region=[x=5,y=5,width=10,height=10], bits=\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000]", 
            bitMask.toString() 
        );
        
        bitMask.setAll( 7, 7, 2, 2 );
        assertEquals( 
            "BitMask [region=[x=5,y=5,width=10,height=10], bits=\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000110\n" + 
            "0000000110\n" + 
            "0000000000]", 
            bitMask.toString() 
        );
        
        bitMask.setAll( 7, 7, 2, 2, true );
        assertEquals( 
            "BitMask [region=[x=5,y=5,width=10,height=10], bits=\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0011000000\n" + 
            "0011000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0000000110\n" + 
            "0000000110\n" + 
            "0000000000]", 
            bitMask.toString() 
        );
        
        bitMask.setAll( 9, 10, 20, 2, true );
        assertEquals( 
            "BitMask [region=[x=5,y=5,width=10,height=10], bits=\n" + 
            "0000000000\n" + 
            "0000000000\n" + 
            "0011000000\n" + 
            "0011000000\n" + 
            "0000000000\n" + 
            "0000111111\n" + 
            "0000111111\n" + 
            "0000000110\n" + 
            "0000000110\n" + 
            "0000000000]", 
            bitMask.toString() 
        );
    }
    
    @Test
    public void testSetOr() {
        BitMask mask1 = new BitMask( 0, 0, 50, 50 );
        BitMask mask2 = new BitMask( 10, 10, 10, 10 );
        for ( int i = 0; i < 10; i++ ) {
            mask2.set( i, i );
        }
        
        assertEquals( 
            "BitMask [region=[x=0,y=0,width=50,height=50], bits=\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000]", 
            mask1.toString() 
        );
        
        assertEquals( 
            "BitMask [region=[x=10,y=10,width=10,height=10], bits=\n" + 
            "1000000000\n" + 
            "0100000000\n" + 
            "0010000000\n" + 
            "0001000000\n" + 
            "0000100000\n" + 
            "0000010000\n" + 
            "0000001000\n" + 
            "0000000100\n" + 
            "0000000010\n" + 
            "0000000001]", 
            mask2.toString() 
        );
        
        mask1.or( mask2 );
        assertEquals( 
            "BitMask [region=[x=0,y=0,width=50,height=50], bits=\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000\n" + 
            "00000000000000000000000000000000000000000000000000]", 
            mask1.toString() 
        );
        
    }
    

}
